// <auto-generated />
using System;
using EFC;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFC.Migrations
{
    [DbContext(typeof(DbContext1))]
    partial class DbContext1ModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFC.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories1");
                });

            modelBuilder.Entity("EFC.Models.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("RestourantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestourantId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("EFC.Models.FavoriteRestaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RestourantId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestourantId");

                    b.HasIndex("UserId");

                    b.ToTable("RestourantUser");
                });

            modelBuilder.Entity("EFC.Models.FoodProd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductsId");

                    b.ToTable("MyProperty");
                });

            modelBuilder.Entity("EFC.Models.MediaMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DishsId")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DishsId");

                    b.ToTable("MediaMenu");
                });

            modelBuilder.Entity("EFC.Models.MediaRes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MediaRes");
                });

            modelBuilder.Entity("EFC.Models.MediaUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MediaUser");
                });

            modelBuilder.Entity("EFC.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EFC.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Rating_N")
                        .HasColumnType("int");

                    b.Property<int>("RestourantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestourantId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("EFC.Models.Restourant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category1Id")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MediaResId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Num")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MediaResId")
                        .IsUnique();

                    b.ToTable("Restourant");
                });

            modelBuilder.Entity("EFC.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MediaUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassW")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MediaUserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EFC.Models.Dish", b =>
                {
                    b.HasOne("EFC.Models.Restourant", null)
                        .WithMany("Dishes")
                        .HasForeignKey("RestourantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFC.Models.FavoriteRestaurant", b =>
                {
                    b.HasOne("EFC.Models.Restourant", null)
                        .WithMany("favoriteRestaurants")
                        .HasForeignKey("RestourantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFC.Models.User", null)
                        .WithMany("favoriteRestaurants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFC.Models.FoodProd", b =>
                {
                    b.HasOne("EFC.Models.Product", "Products")
                        .WithMany("FoodProds")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");
                });

            modelBuilder.Entity("EFC.Models.MediaMenu", b =>
                {
                    b.HasOne("EFC.Models.Dish", "Dishs")
                        .WithMany("DishList")
                        .HasForeignKey("DishsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dishs");
                });

            modelBuilder.Entity("EFC.Models.Product", b =>
                {
                    b.HasOne("EFC.Models.Category", null)
                        .WithMany("products")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("EFC.Models.Rating", b =>
                {
                    b.HasOne("EFC.Models.Restourant", null)
                        .WithMany("ratings")
                        .HasForeignKey("RestourantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFC.Models.Restourant", b =>
                {
                    b.HasOne("EFC.Models.Category", null)
                        .WithMany("Restourant")
                        .HasForeignKey("CategoryId");

                    b.HasOne("EFC.Models.MediaRes", "MediaRes")
                        .WithOne("Res")
                        .HasForeignKey("EFC.Models.Restourant", "MediaResId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaRes");
                });

            modelBuilder.Entity("EFC.Models.User", b =>
                {
                    b.HasOne("EFC.Models.MediaUser", "MediaUser")
                        .WithOne("User")
                        .HasForeignKey("EFC.Models.User", "MediaUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaUser");
                });

            modelBuilder.Entity("EFC.Models.Category", b =>
                {
                    b.Navigation("Restourant");

                    b.Navigation("products");
                });

            modelBuilder.Entity("EFC.Models.Dish", b =>
                {
                    b.Navigation("DishList");
                });

            modelBuilder.Entity("EFC.Models.MediaRes", b =>
                {
                    b.Navigation("Res")
                        .IsRequired();
                });

            modelBuilder.Entity("EFC.Models.MediaUser", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("EFC.Models.Product", b =>
                {
                    b.Navigation("FoodProds");
                });

            modelBuilder.Entity("EFC.Models.Restourant", b =>
                {
                    b.Navigation("Dishes");

                    b.Navigation("favoriteRestaurants");

                    b.Navigation("ratings");
                });

            modelBuilder.Entity("EFC.Models.User", b =>
                {
                    b.Navigation("favoriteRestaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
